name: tf-aws

on:
  workflow_call:
    inputs:
      terraform_version:
        description: "Terraform version"
        type: string
        required: false
        default: "1.1.6"
      path:
        description: "Directory containing Terraform code"
        type: string
        required: false
        default: "."
      account:
        description: "Only run for a specific account"
        type: string
        required: false
        default: ""

permissions:
  id-token: write
  contents: read

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      session: ${{ steps.defs.outputs.session }}
      repository: ${{ steps.defs.outputs.repository }}
      accounts: ${{ steps.query.outputs.accounts }}
    steps:
      - uses: actions/checkout@v2
      - name: Definitions
        id: defs
        run: |
          repo="$(basename "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')"
          echo "::set-output name=session::$repo,${{ github.workflow }},${{ github.run_number }}"
          echo "::set-output name=repository::$repo"
      - name: Assume PR role
        if: ${{ github.event_name == 'pull_request' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::312805905296:role/gha/gha_${{ steps.defs.outputs.repository }}_pr
          role-session-name: ${{ steps.defs.outputs.session }}
          mask-aws-account-id: false
      - name: Assume Push role
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::312805905296:role/gha/gha_${{ steps.defs.outputs.repository }}_push
          role-session-name: ${{ steps.defs.outputs.session }}
          mask-aws-account-id: false
      - name: Get accounts
        id: query
        working-directory: ${{ inputs.path }}
        env:
          account_override: ${{ inputs.account }}
        run: |
          # Accounts in our AWS organization
          aws organizations list-accounts | jq -c '[.Accounts[] | {name:.Name|ascii_downcase|gsub(" ";"-"), aws_account_id:.Id}]' | tee org_accounts.json
          # Accounts that have vars files in the repo
          glob="${account_override:-*}.tfvars"
          find vars -name "$glob" | jq -Rs '[split("\n")[] | select(length > 0) | sub("vars/"; "") | sub(".tfvars"; "")]' | tee var_accounts.json
          # Find the overlap
          accounts="$(python -c "import json; org = json.load(open('org_accounts.json')); var = json.load(open('var_accounts.json')); print(json.dumps([a for a in org if a['name'] in var]))")"
          echo "::set-output name=accounts::$accounts"

  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ inputs.terraform_version }}
      - name: validate
        working-directory: ${{ inputs.path }}
        run: |
          terraform init -backend=false
          terraform validate

  run:
    runs-on: ubuntu-latest
    needs:
      - init
      - validate
    strategy:
      fail-fast: false
      matrix:
        env: ${{ fromJSON(needs.init.outputs.accounts) }}
    steps:
      - uses: actions/checkout@v2
      - name: Assume PR role
        if: ${{ github.event_name == 'pull_request' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::312805905296:role/gha/gha_${{ needs.init.outputs.repository }}_pr
          role-session-name: ${{ needs.init.outputs.session }}
          mask-aws-account-id: false
      - name: Assume Push role
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::312805905296:role/gha/gha_${{ needs.init.outputs.repository }}_push
          role-session-name: ${{ needs.init.outputs.session }}
          mask-aws-account-id: false
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ inputs.terraform_version }}
      - name: init
        working-directory: ${{ inputs.path }}
        env:
          scope: ${{ github.ref == 'refs/heads/main' && 'apply' || 'plan' }}
        run: |
          cat <<EOF >_provider_override.tf
          terraform {
            backend "s3" {}
          }
          provider "aws" {
            assume_role {
              role_arn     = "arn:aws:iam::${{ matrix.env.aws_account_id }}:role/gha/gha_${{ needs.init.outputs.repository }}_$scope"
              session_name = "${{ needs.init.outputs.session }}"
            }
            default_tags {
              tags = {
                Environment = "${{ matrix.env.name }}"
                GithubRepo = "${{ github.repository }}"
                GithubPath = "${{ inputs.path }}"
                GithubWorkflow = "${{ github.workflow }}"
              }
            }
          }
          EOF
          cat <<EOF >_workflow.tfvars
          boundary_policy_arn = "arn:aws:iam::${{ matrix.env.aws_account_id }}:policy/gha/gha_${{ needs.init.outputs.repository }}"
          EOF

          terraform init \
            -backend-config="bucket=tfstate.mgmt.hubs.com" \
            -backend-config="key=${{ needs.init.outputs.repository }}" \
            -backend-config="workspace_key_prefix=env" \
            -backend-config="dynamodb_table=tflock"

          terraform workspace select "${{ matrix.env.name }}" || terraform workspace new "${{ matrix.env.name }}"

      - name: plan
        working-directory: ${{ inputs.path }}
        env:
          tfvars: vars/${{ matrix.env.name }}.tfvars
        run: terraform plan -no-color -out=tfplan -var-file="$tfvars" -var-file="_workflow.tfvars"
      - name: apply
        if: ${{ github.ref == 'refs/heads/main' }}
        working-directory: ${{ inputs.path }}
        run: if test -f tfplan; then terraform apply -no-color tfplan; fi

  complete:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [run]
    steps:
      - if: ${{ needs.run.result != 'success' }}
        run: exit 1
