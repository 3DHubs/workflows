name: ecr-build

on:
  workflow_call:
    inputs:
      build-args:
        description: "Build arguments for the Docker build"
        required: false
        type: string
      use-cache:
        description: "Set to false to disable Docker build caching"
        default: true
        type: boolean
      tag-suffix:
        description: "Suffix to append to the image tag"
        required: false
        type: string
      dockerfile:
        description: "Custom path to Dockerfile"
        required: false
        type: string
      target:
        description: "Target Docker stage to build"
        required: false
        type: string
      lfs:
        description: "Requires Git LFS checkout"
        required: false
        type: boolean
        default: false
      push:
        description: "Set to false to not push the image"
        required: false
        type: boolean
        default: true
      create-repo:
        description: "Set to false to skip creating the repository"
        required: false
        type: boolean
        default: true

    outputs:
      image-repo:
        description: "Image repository name"
        value: ${{ jobs.build.outputs.image-repo }}
      image-tag:
        description: "Image tag"
        value: ${{ jobs.build.outputs.image-tag }}
      image-sha:
        description: "Image digest"
        value: ${{ jobs.build.outputs.image-sha }}

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: ECR Build
    runs-on: ubuntu-latest
    outputs:
      image-repo: ${{ steps.create-ecr.outputs.repository }}
      image-tag: ${{ steps.docker-metadata.outputs.version }}
      image-sha: ${{ steps.docker-build.outputs.digest }}
    steps:
      - name: Checkout LFS
        uses: actions/checkout@v2
        if: inputs.lfs
        with:
          lfs: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::312805905296:role/gha-ecr-build

      - name: Create ECR repo
        id: create-ecr
        if: inputs.create-repo
        run: |
          # remove GitHub owner and lowercase the repo name
          repo="$(basename "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')"

          # create the repository if it doesn't exist
          aws ecr describe-repositories \
            --repository-names "$repo" \
            --output table \
          || aws ecr create-repository --repository-name "$repo"

          # set the repository pull policy
          cat <<EOF >/tmp/repo-policy.json
          {
            "Version" : "2012-10-17",
            "Statement" : [ {
              "Sid" : "AllowPull",
              "Effect" : "Allow",
              "Principal" : "*",
              "Action" : [ "ecr:GetDownloadUrlForLayer", "ecr:DescribeRepositories", "ecr:DescribeImages", "ecr:BatchGetImage", "ecr:BatchCheckLayerAvailability" ],
              "Condition" : {
                "ForAnyValue:StringLike" : {
                  "aws:PrincipalOrgPaths" : "o-nzcbc33q4i/*"
                }
              }
            } ]
          }
          EOF
          aws ecr set-repository-policy --repository-name "$repo" --policy-text file:///tmp/repo-policy.json

          # set the repository lifecycle policy
          cat <<EOF >/tmp/lifecycle-policy.json
          {
            "rules": [
              {
                "rulePriority": 10,
                "description": "Keep 25 versions of main tag",
                "selection": {
                  "tagStatus": "tagged",
                  "tagPrefixList": ["main"],
                  "countType": "imageCountMoreThan",
                  "countNumber": 25
                },
                "action": {
                  "type": "expire"
                }
              },
              {
                "rulePriority": 11,
                "description": "Keep 25 versions of master tag",
                "selection": {
                  "tagStatus": "tagged",
                  "tagPrefixList": ["master"],
                  "countType": "imageCountMoreThan",
                  "countNumber": 25
                },
                "action": {
                  "type": "expire"
                }
              },
              {
                "rulePriority": 20,
                "description": "Expire any images older than 90 days",
                "selection": {
                  "tagStatus": "any",
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 90
                },
                "action": {
                  "type": "expire"
                }
              },
              {
                "rulePriority": 30,
                "description": "Keep total count to 1000 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 1000
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
          EOF
          aws ecr put-lifecycle-policy --repository-name "$repo" --lifecycle-policy-text file:///tmp/lifecycle-policy.json

          echo "::set-output name=repository::$repo"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup Docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Setup cache for docker buildx
        id: buildx-cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx

      - name: Docker metadata
        id: docker-metadata
        uses: docker/metadata-action@v3
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ steps.create-ecr.outputs.repository }}
          tags: |
            type=ref,event=branch,suffix=${{ inputs.tag-suffix }}

      - name: Docker build
        id: docker-build
        uses: docker/build-push-action@v2
        with:
          build-args: ${{ inputs.build-args }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: ${{ inputs.use-cache && 'type=local,dest=/tmp/.buildx-cache-new,mode=max' || null }}
          context: ${{ inputs.lfs && '.' || null }}
          file: ${{ inputs.dockerfile }}
          labels: ${{ steps.docker-metadata.outputs.labels }}
          push: ${{ inputs.push }}
          tags: ${{ steps.docker-metadata.outputs.tags }}
          target: ${{ inputs.target }}

      - name: Move cache
        if: inputs.use-cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
